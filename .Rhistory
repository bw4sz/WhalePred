out<-data.frame(Sum=sum(timestack))
return(out)
}
k$cellvalue<-extract(r,k)
a<-as.data.frame(k) %>% group_by(cellvalue) %>% do(timecell(.))
head(j)
head(k)
k$cellvalue
table(k$cellvalue)
j<-k[k$cellvalue %in% c(25,26),]
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
}
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="hours")
}
out<-data.frame(Sum=sum(timestack))
return(out)
k<-SpatialPointsDataFrame(cbind(sxy[[1]]$x,sxy[[1]]$y),data=sxy[[1]],proj4string=CRS("+proj=longlat +datum=WGS84"))
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
out<-timestack[1]<-0
} else {
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="hours")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#get the cells that points are in
k$cellvalue<-extract(r,k)
k<-SpatialPointsDataFrame(cbind(sxy[[1]]$x,sxy[[1]]$y),data=sxy[[1]],proj4string=CRS("+proj=longlat +datum=WGS84"))
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="hours")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
a<-as.data.frame(k) %>% group_by(cellvalue) %>% do(timecell(.))
plot(rasterize(k,r,fun=timecell))
a
a$Sum
a<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
a
mxy$cellvalue<-extract(r,mxy)
d$cellvalue<-extract(r,d)
a<-as.data.frame(d) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
d
d
plot(d)
table(d$cellvalue)
a<-as.data.frame(d) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
table(d$cellvalue,d$Animal)
a<-as.data.frame(d) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
a<-as.data.frame(d) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
d
a<-as.data.frame(d) %>% group_by(cellvalue) %>% do(timecell(.))
k<-SpatialPointsDataFrame(cbind(sxy[[1]]$x,sxy[[1]]$y),data=sxy[[1]],proj4string=CRS("+proj=longlat +datum=WGS84"))
k$cellvalue<-extract(r,k)
a<-as.data.frame(k) %>% group_by(cellvalue) %>% do(timecell(.))
a<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
k<-SpatialPointsDataFrame(cbind(sxy[[2]]$x,sxy[[2]]$y),data=sxy[[2]],proj4string=CRS("+proj=longlat +datum=WGS84"))
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
a<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
a
k<-SpatialPointsDataFrame(cbind(sxy[[3]]$x,sxy[[3]]$y),data=sxy[[3]],proj4string=CRS("+proj=longlat +datum=WGS84"))
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
a<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
a
k<-SpatialPointsDataFrame(cbind(sxy[[2:3]]$x,sxy[[2:3]]$y),data=sxy[[2:3]],proj4string=CRS("+proj=longlat +datum=WGS84"))
k<-SpatialPointsDataFrame(cbind(sxy[2:3]$x,sxy[2:3]$y),data=sxy[2:3],proj4string=CRS("+proj=longlat +datum=WGS84"))
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks
rbind_all(sptracks)
sptracks<-rbind_all(sptracks)
head(sptracks)
sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
for(x in 1:length(cellvals)){
r[cellvals$cellvalue[x]]<-cellvalls$Sum
}
for(x in 1:length(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum
}
for(x in 1:length(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r)
r[]<-NA
for(x in 1:length(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r)
cellvals
x
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r)
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
rm(ice)
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#remove minke whales
minke<-c("131117","131118","131120","154184")
mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
#mxy<-mxy[mxy$Animal %in% c("112699","121207","131151"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
d<-crop(d,y=extent(c(-75,-50,-70,-57.5)))
#give it a geospatial layer
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
krill<-read.csv("InputData/CCAMLR_aggregated_catch_C1.csv")
ksp<-SpatialPointsDataFrame(cbind(krill$GridMidpointDegreeLon,krill$GridMidpointHalfDegreeLat),krill)
#raster
r<-raster(extent(d)*c(2,1.1))
#put cellindex number
r[]<-1:ncell(r)
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="hours")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r)
#raster
r<-raster(extent(d)*c(2,1.1))
#put cellindex number
r[]<-1:ncell(r)
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r)
plot(r)/length(unique(mxy$Animal))
unique(mxy$Animal)
plot(r/length(unique(mxy$Animal)))
map(add=TRUE)
r
r<-raster(extent(d)*c(2,1.1))
res(r)<-1
r
#raster
r<-raster(extent(d)*c(2,1.1))
res(r)<-1
#put cellindex number
r[]<-1:ncell(r)
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r/length(unique(mxy$Animal)))
map(add=T)
#raster
r<-raster(extent(d)*c(2,1.1))
res(r)<-0.1
#put cellindex number
r[]<-1:ncell(r)
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r/length(unique(mxy$Animal)))
map(add=T)
plot(r)
map(add=T)
temp <- get_map(location=bbox(r),source="google",zoom=5,maptype="satellite",color = "bw",scale = 2)
ggmap(temp) + geom_tile(data=r,aes(x=x, y=y,fill=layer),alpha=0.7) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Probability of Foraging", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(0,8)) + theme_inset()
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=0.7) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Probability of Foraging", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(0,8)) + theme_inset()
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=0.7) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Probability of Foraging", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(3,11)) + theme_inset()
ggsave("Figures/ResidenceTime.jpeg",height=9,width=8)
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=0.7) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Probability of Foraging", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(2,10))
ggsave("Figures/ResidenceTime.jpeg",height=7,width=5)
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=0.9) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Probability of Foraging", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(2,10))
ggsave("Figures/ResidenceTime.jpeg",height=9,width=7)
temp <- get_map(location=bbox(r),source="google",zoom=5,maptype="satellite",color = "bw",scale = 2)
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=0.9) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Probability of Foraging", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(2,5))
ggsave("Figures/ResidenceTime.jpeg",height=9,width=7)
plot(krill)
plot(ksp)
map(add=T)
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=1) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Days", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(2,5))
ggsave("Figures/ResidenceTime.jpeg",height=9,width=7)
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=1) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Days", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(1,5))
ggsave("Figures/ResidenceTime.jpeg",height=9,width=7)
plot(ksp)
map(add=T)
ksp
#raster
r<-raster(extent(d)*c(2,1.1))
res(r)<-0.5
#put cellindex number
r[]<-1:ncell(r)
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r/length(unique(mxy$Animal)))
map(add=T)
temp <- get_map(location=bbox(r),source="google",zoom=5,maptype="satellite",color = "bw",scale = 2)
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=1) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Days", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(1,5))
ggsave("Figures/ResidenceTime.jpeg",height=9,width=7)
r<-raster(extent(d)*c(2,1.1))
res(r)<-0.25
r
ksp
r<-raster(extent(d)*c(2,1.1))
r
?res
?resample
r<-raster(extent(d)*c(2,1.1),res=0.25)
r
r<-raster(extent(d)*c(2,1.1))
r
r<-raster(extent(d)*c(2,1.1),ncell=1000)
r<-raster(extent(d)*c(2,1.1),nrow=100,ncol=100)
r
#raster
r<-raster(extent(d)*c(2,1.1),nrow=100,ncol=100)
#res(r)<-0.25
#put cellindex number
r[]<-1:ncell(r)
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r/length(unique(mxy$Animal)))
map(add=T)
temp <- get_map(location=bbox(r),source="google",zoom=5,maptype="satellite",color = "bw",scale = 2)
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=1) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Days", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(1,5))
ggsave("Figures/ResidenceTime.jpeg",height=9,width=7)
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=0.9) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Days", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(1,5))
ggsave("Figures/ResidenceTime.jpeg",height=9,width=7)
res(r)<-0.25
r
plot(r)
