pc$parameter<-data.frame(str_match(pc$par,"(\\w+)"))[,-1]
#Extract index
splitpc<-split(pc,pc$parameter)
## double index
splitpc[c("beta","beta2")]<-lapply(splitpc[c("beta","beta2")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+)]"))[,3:4]
colnames(sv)<-c("MonthF","Behavior")
setp<-data.frame(x,sv)
#get month name
mindex<-mxy %>% select(MonthF,Month) %>% distinct()
setp<-merge(setp,mindex,by="MonthF")
return(setp)
})
splitpc[c("beta","beta2")][[1]]
splitpc[c("beta","beta2")]
splitpc[c("beta","beta2")][[1]]
pc<-melt(jagM$BUGSoutput$sims.array)
colnames(pc)<-c("Draw","chain","par","value")
pc$parameter<-data.frame(str_match(pc$par,"(\\w+)"))[,-1]
#Extract index
splitpc<-split(pc,pc$parameter)
splitpc[c("beta","beta2")][[1]]
x<-splitpc[c("beta","beta2")][[1]]
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+)]"))[,3:4]
head(sv)
colnames(sv)<-c("MonthF","Behavior")
setp<-data.frame(x,sv)
head(setp)
mindex<-mxy %>% select(MonthF,Month) %>% distinct()
mindex
mindex<-mxy %>% select(MonthF,Month) %>% distinct()
mindex
mxy %>% select(MonthF,Month)
mindex<-mxy %>% ungroup() %>% select(MonthF,Month) %>% distinct()
mindex
#bind chains
pc<-melt(jagM$BUGSoutput$sims.array)
colnames(pc)<-c("Draw","chain","par","value")
#extract parameter name
pc$parameter<-data.frame(str_match(pc$par,"(\\w+)"))[,-1]
#Extract index
splitpc<-split(pc,pc$parameter)
#single index
splitpc[c("alpha_mu","beta_mu","beta2_mu","gamma","theta")]<-lapply(splitpc[c("alpha_mu","beta_mu","beta2_mu","gamma","theta")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+)]"))[,3]
pc<-data.frame(x,Behavior=sv)
return(pc)
})
## double index
splitpc[c("beta","beta2")]<-lapply(splitpc[c("beta","beta2")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+)]"))[,3:4]
colnames(sv)<-c("MonthF","Behavior")
setp<-data.frame(x,sv)
#get month name
mindex<-mxy %>% ungroup() %>% select(MonthF,Month) %>% distinct()
setp<-merge(setp,mindex,by="MonthF")
return(setp)
})
#State index
splitpc[c("state")]<-lapply(splitpc[c("state")],function(x){
#As matrices
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)]"))[,3:5]
colnames(sv)<-c("Animal","Track","step")
pc<-data.frame(x,sv)
})
#Three index
splitpc[c("phi")]<-lapply(splitpc[c("phi")],function(x){
#As matrices
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+),(\\d+)]"))[,3:6]
colnames(sv)<-c("Animal","Track","step","Behavior")
pc<-data.frame(x,sv)
})
#bind all matrices back together
pc<-rbind_all(splitpc)
rm(splitpc)
head(pc)
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5)
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
library(survival)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-T
distc<-raster("InputData/dist2coast-2015.tif")
plot(distc)
library(maps)
map()
plot(distc)
map(add=T)
plot(distc)
plot(distc)
map(add=T)
dplot
load("SingleSpecies.RData")
dplot
postplot<-pc %>% filter(parameter %in% c('beta2_mu','alpha_mu')) %>% dcast(.,Draw+chain~par) %>% group_by(Draw,chain) %>% do(dplot(a1=c(.$'alpha_mu[1]',.$'alpha_mu[2]'),beta2=c(.$'beta2_mu[1]',.$'beta2_mu[2]'),coast=unique(mxy$coast)))
warnings()
head(postplot)
postplot<-pc %>% filter(parameter %in% c('beta2_mu','alpha_mu')) %>% dcast(.,Draw+chain~par) %>% group_by(Draw,chain) %>% do(dplot(a1=c(.$'alpha_mu[1]',.$'alpha_mu[2]'),beta2=c(.$'beta2_mu[1]',.$'beta2_mu[2]'),coast=unique(mxy$coast))) %>% group_by(coast,Begin,State) %>% summarize(mean=mean(y),lower=quantile(y,0.05),upper=quantile(y,0.95))
poltplot
postplot
ggplot(postplot) + geom_ribbon(aes(x=coast,y=mean,ymin=upper,ymax=lower,fill=State),alpha=0.5) + theme_bw() + labs(col="Transition",x="Distance to Coast (km)",y="Probability",fill="Transition") + facet_wrap(~Begin) + xlim(0,quantile(mxy$coast,0.5))
postplot_alpha<-pc %>% filter(parameter %in% c('alpha_mu')) %>% do(dcast(.,Draw+chain~par))
postplot_beta<-pc %>% filter(parameter %in% c('beta2')) %>% dcast(.,Month+Draw+chain~parameter+Behavior)
#bind chains
pc<-melt(jagM$BUGSoutput$sims.array)
colnames(pc)<-c("Draw","chain","par","value")
#extract parameter name
pc$parameter<-data.frame(str_match(pc$par,"(\\w+)"))[,-1]
#Extract index
splitpc<-split(pc,pc$parameter)
#single index
splitpc[c("alpha_mu","beta_mu","beta2_mu","gamma","theta")]<-lapply(splitpc[c("alpha_mu","beta_mu","beta2_mu","gamma","theta")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+)]"))[,3]
pc<-data.frame(x,Behavior=sv)
return(pc)
})
## double index
splitpc[c("beta","beta2")]<-lapply(splitpc[c("beta","beta2")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+)]"))[,3:4]
colnames(sv)<-c("MonthF","Behavior")
setp<-data.frame(x,sv)
#get month name
mindex<-mxy %>% ungroup() %>% select(MonthF,Month) %>% distinct()
setp<-merge(setp,mindex,by="MonthF")
return(setp)
})
#State index
splitpc[c("state")]<-lapply(splitpc[c("state")],function(x){
#As matrices
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)]"))[,3:5]
colnames(sv)<-c("Animal","Track","step")
pc<-data.frame(x,sv)
})
#Three index
splitpc[c("phi")]<-lapply(splitpc[c("phi")],function(x){
#As matrices
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+),(\\d+)]"))[,3:6]
colnames(sv)<-c("Animal","Track","step","Behavior")
pc<-data.frame(x,sv)
})
#bind all matrices back together
pc<-rbind_all(splitpc)
rm(splitpc)
postplot_alpha<-pc %>% filter(parameter %in% c('alpha_mu')) %>% do(dcast(.,Draw+chain~par))
postplot_beta<-pc %>% filter(parameter %in% c('beta2')) %>% dcast(.,Month+Draw+chain~parameter+Behavior)
postall<-merge(postplot_alpha,postplot_beta,by=c("Draw","chain"))
head(postall)
allplot<-postall %>% group_by(Month,Draw,chain) %>% do(dplot(a1=c(.$'alpha_mu[1]',.$'alpha_mu[2]'),beta=c(.$'beta2_1',.$'beta2_2'),x=0,coast=unique(mxy$coast))) %>% group_by(x=coast,Month,Begin,State) %>% summarize(mean=mean(y),lower=quantile(y,0.05),upper=quantile(y,0.95))
allplot$Month<-factor(allplot$Month,levels=month.name)
ggplot(allplot) + geom_ribbon(aes(x=x,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5) + theme_bw() + labs(col="Transition",x="Distance to Coast (km)",y="Probability",fill="Transition") + facet_grid(State~Begin)+ xlim(0,quantile(mxy$coast,0.5))
allplot<-postall %>% group_by(Month,Draw,chain) %>% do(dplot(a1=c(.$'alpha_mu[1]',.$'alpha_mu[2]'),beta=c(.$'beta2_1',.$'beta2_2'),x=0,coast=unique(mxy$coast))) %>% group_by(coast,Month,Begin,State) %>% summarize(mean=mean(y),lower=quantile(y,0.05),upper=quantile(y,0.95))
allplot$Month<-factor(allplot$Month,levels=month.name)
ggplot(allplot) + geom_ribbon(aes(x=x,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5) + theme_bw() + labs(col="Transition",x="Distance to Coast (km)",y="Probability",fill="Transition") + facet_grid(State~Begin)+ xlim(0,quantile(mxy$coast,0.5))
xlim(0,quantile(mxy$coast,0.5))
head(allplot)
allplot$mean
postplot_alpha<-pc %>% filter(parameter %in% c('alpha_mu')) %>% do(dcast(.,Draw+chain~par))
postplot_beta<-pc %>% filter(parameter %in% c('beta2')) %>% dcast(.,Month+Draw+chain~parameter+Behavior)
allplot<-postall %>% group_by(Month,Draw,chain) %>% do(dplot(a1=c(.$'alpha_mu[1]',.$'alpha_mu[2]'),beta=c(.$'beta2_1',.$'beta2_2'),x=0,coast=unique(mxy$coast))) %>% group_by(coast,Month,Begin,State) %>% summarize(mean=mean(y),lower=quantile(y,0.05),upper=quantile(y,0.95))
postall<-merge(postplot_alpha,postplot_beta,by=c("Draw","chain"))
allplot$Month<-factor(allplot$Month,levels=month.name)
ggplot(allplot) + geom_ribbon(aes(x=x,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5) + theme_bw() + labs(col="Transition",x="Distance to Coast (km)",y="Probability",fill="Transition") + facet_grid(State~Begin)+ xlim(0,quantile(mxy$coast,0.5))
ggplot(allplot) + geom_ribbon(aes(x=coast,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5) + theme_bw() + labs(col="Transition",x="Distance to Coast (km)",y="Probability",fill="Transition") + facet_grid(State~Begin)+ xlim(0,quantile(mxy$coast,0.5))
postplot_alpha<-pc %>% filter(parameter %in% c('alpha_mu')) %>% do(dcast(.,Draw+chain~par))
postplot_beta<-pc %>% filter(parameter %in% c('beta2')) %>% dcast(.,Month+Draw+chain~parameter+Behavior)
postall<-merge(postplot_alpha,postplot_beta,by=c("Draw","chain"))
allplot<-postall %>% group_by(Month,Draw,chain) %>% do(dplot(a1=c(.$'alpha_mu[1]',.$'alpha_mu[2]'),beta=c(.$'beta2_1',.$'beta2_2'),coast=unique(mxy$coast))) %>% group_by(coast,Month,Begin,State) %>% summarize(mean=mean(y),lower=quantile(y,0.05),upper=quantile(y,0.95))
allplot$Month<-factor(allplot$Month,levels=month.name)
allplot$Month
ggplot(allplot) + geom_ribbon(aes(x=coast,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5) + theme_bw() + labs(col="Transition",x="Distance to Coast (km)",y="Probability",fill="Transition") + facet_grid(State~Begin)+ xlim(0,quantile(mxy$coast,0.5))
haed(allplot)
head(allplot)
allplot$coast
hist(allplot$coast)
dplot
postplot_alpha<-pc %>% filter(parameter %in% c('alpha_mu')) %>% do(dcast(.,Draw+chain~par))
postplot_beta<-pc %>% filter(parameter %in% c('beta2')) %>% dcast(.,Month+Draw+chain~parameter+Behavior)
head(postplot-beta)
head(postplot_beta)
#get the posterior estimates of the env function
postplot_alpha<-pc %>% filter(parameter %in% c('alpha_mu')) %>% do(dcast(.,Draw+chain~par))
postplot_beta<-pc %>% filter(parameter %in% c('beta2')) %>% dcast(.,Month+Draw+chain~parameter+Behavior)
postall<-merge(postplot_alpha,postplot_beta,by=c("Draw","chain"))
allplot<-postall %>% group_by(Month,Draw,chain) %>% do(dplot(a1=c(.$'alpha_mu[1]',.$'alpha_mu[2]'),beta2=c(.$'beta2_1',.$'beta2_2'),coast=unique(mxy$coast))) %>% group_by(coast,Month,Begin,State) %>% summarize(mean=mean(y),lower=quantile(y,0.05),upper=quantile(y,0.95))
allplot$Month<-factor(allplot$Month,levels=month.name)
ggplot(allplot) + geom_ribbon(aes(x=coast,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5) + theme_bw() + labs(col="Transition",x="Distance to Coast (km)",y="Probability",fill="Month") + facet_grid(State~Begin)+ xlim(0,quantile(mxy$coast,0.5))
#mean env estimate
ggplot(allplot) + geom_ribbon(aes(x=coast,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5) + theme_bw() + labs(col="Transition",x="Distance to Coast (km)",y="Probability",fill="Month") + facet_grid(State~Begin)
ggplot(allplot[allplot$Begin=="Traveling" & allplot$State == "Foraging",]) + geom_ribbon(aes(x=x,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5,size=1) + theme_bw() + labs(col="Transition",x="Ocean Depth (km)",y="Probability of Feeding",fill="Month") + xlim(0,quantile(mxy$coast,0.5))
ggplot(allplot[allplot$Begin=="Traveling" & allplot$State == "Foraging",]) + geom_ribbon(aes(x=coast,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5,size=1) + theme_bw() + labs(col="Transition",x="Ocean Depth (km)",y="Probability of Feeding",fill="Month") + xlim(0,quantile(mxy$coast,0.5))
ggplot(allplot[allplot$Begin=="Traveling" & allplot$State == "Foraging",]) + geom_ribbon(aes(x=x,y=mean,ymin=upper,ymax=lower,fill=Month),alpha=0.5,size=1) + theme_bw() + labs(col="Transition",x="Ocean Depth (km)",y="Probability of Switching",fill="Month")
ggplot(allplot[allplot$Begin=="Traveling" & allplot$State == "Foraging",]) + geom_line(aes(x=coast,y=mean,ymin=upper,ymax=lower,col=Month),alpha=0.5,size=1) + theme_bw() + labs(col="Month",x="Ocean Depth (km)",y="Probability of Switching",fill="Month")
ggplot(allplot[allplot$Begin=="Traveling" & allplot$State == "Foraging",]) + geom_line(aes(x=coast,y=mean,ymin=upper,ymax=lower,col=Month),alpha=0.5,size=1) + theme_bw() + labs(col="Transition",x="Ocean Depth (km)",y="Probability of Feeding",fill="Month") + xlim(0,quantile(mxy$coast,0.5))
diffras<-monthras[[1]]-monthras[[5]]
diffdf<-as.data.frame(rasterToPoints(diffras))
plot(diffdf)
plot(diffras)
monthras
stack(monthras)
var(stack(monthras))
sd(stack(monthras))
stack(monthras)
s
sd(s)
var(s)
?calc
calc(s,sd)
calc(stack(monthras),sd)
plot(calc(stack(monthras),sd))
plot(calc(stack(s),sd))
s
s
monthras
#get the posterior estimates of the env function
postplot_alpha<-pc %>% filter(parameter %in% c('alpha_mu')) %>% do(dcast(.,Draw+chain~par))
postplot_beta<-pc %>% filter(parameter %in% c('beta',"beta2")) %>% dcast(.,Month+Draw+chain~parameter+Behavior)
postall<-merge(postplot_alpha,postplot_beta,by=c("Draw","chain"))
postall$Month<-factor(postall$Month,levels=month.name)
Months<-unique(postall$Month)
monthras<-list()
for (x in Months){
monthpar<-postall %>% filter(Month==x)
##Bathymetry
s<-stack(rice,distc)
#Traveling
travpar<-calc(s,function(x){ 1-inv.logit(mean(monthpar$`alpha_mu[1]`) + mean(monthpar$`beta_1` ) * x[1] + mean(monthpar$`beta2_1` * x[2]))})
travdf<-data.frame(rasterToPoints(travpar))
monthras[[x]]<-travpar
}
names(monthras)<-Months
plot(calc(stack(monthras),sd))
plot(calc(stack(monthras),var))
plot(calc(stack(monthras),sd))
plot(varArea<-calc(stack(monthras),sd))
plot(varArea<-calc(stack(monthras),mean))
motnhras
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
#coast
distc<-raster("InputData/dist2coast-2015.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
plot(distc)
mask
?mask
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -1133643618235885002.csv")
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5)
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
library(survival)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-T
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -1133643618235885002.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#grab set of animals
#mxy<-mxy[mxy$Animal %in% c("112699","121207","131151","112703","121211","131132","112737","131156","12326","123232","112705","154187","121210","131134","131141","112701","131159","131142","131144","154186","123224"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy)
d<-crop(d,y=extent(c(-75,-50,-70,-55)))
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy$location.lat
mxy$location.ong
mxy$location.long
hist(mxy$location.long)
dim(mdat)
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
dim(mdat)
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -1133643618235885002.csv")
dim(mdat)
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
mdat$NOAA.Climate.Indexes.South.Atlantic.SST.Index
hist(mdat$NOAA.Climate.Indexes.South.Atlantic.SST.Index)
hist(mdat$MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST)
ggplot(mdat,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST)) + geom_line()
ggplot(mdat,aes(x=location.lat,y=location.long,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST)) + geom_line() + scale_color_continuous(low='red',high='blue')
ggplot(mdat,aes(x=location.lat,y=location.long,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST,group=Animal)) + geom_line() + scale_color_continuous(low='red',high='blue')
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#grab set of animals
#mxy<-mxy[mxy$Animal %in% c("112699","121207","131151","112703","121211","131132","112737","131156","12326","123232","112705","154187","121210","131134","131141","112701","131159","131142","131144","154186","123224"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy)
d<-crop(d,y=extent(c(-75,-50,-70,-55)))
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
ggplot(mdat,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST,group=Animal)) + geom_line() + scale_color_continuous(low='red',high='blue')
ggplot(mxy,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST,group=Animal)) + geom_line() + scale_color_continuous(low='red',high='blue')
ggplot(mxy,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST,group=Animal)) + geom_line(aes(group=Animal)) + scale_color_continuous(low='red',high='blue')
ggplot(mxy,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST)) + geom_path(aes(group=Animal)) + scale_color_continuous(low='red',high='blue')
ggplot(mxy,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST>6)) + geom_path(aes(group=Animal)) + scale_color_continuous(low='red',high='blue')
ggplot(mxy,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST>6)) + geom_path(aes(group=Animal))
ggplot(mxy,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST>4)) + geom_path(aes(group=Animal))
ggplot(mxy,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST>2)) + geom_path(aes(group=Animal))
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none")
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#grab set of animals
#mxy<-mxy[mxy$Animal %in% c("112699","121207","131151","112703","121211","131132","112737","131156","12326","123232","112705","154187","121210","131134","131141","112701","131159","131142","131144","154186","123224"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy)
d<-crop(d,y=extent(c(-75,-50,-70,-58)))
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
dim(mxy)
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
dim(mxy)
#hold copy of orig
oxy<-mxy
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#grab set of animals
#mxy<-mxy[mxy$Animal %in% c("112699","121207","131151","112703","121211","131132","112737","131156","12326","123232","112705","154187","121210","131134","131141","112701","131159","131142","131144","154186","123224"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy)
d<-crop(d,y=extent(c(-75,-50,-70,-57)))
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
#hold copy of orig
oxy<-mxy
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
plot(distc)
ggplot(mxy,aes(x=location.long,y=location.lat,col=coast)) + geom_path(aes(group=Animal)) + scale_color_continuous(low='red',high='blue')
ggplot(mxy,aes(x=location.long,y=location.lat,col=coast>200)) + geom_path(aes(group=Animal)) + scale_color_continuous(low='red',high='blue')
ggplot(mxy,aes(x=location.long,y=location.lat,col=coast>200)) + geom_path(aes(group=Animal))
ggplot(mxy,aes(x=location.long,y=location.lat,col=coast>100)) + geom_path(aes(group=Animal))
ggplot(mxy,aes(x=location.long,y=location.lat,col=coast>150)) + geom_path(aes(group=Animal))
ggplot(mxy,aes(x=location.long,y=location.lat,col=MODIS.Ocean.Terra.OceanColor.4km.Yearly.Daytime.SST)) + geom_path(aes(group=Animal)) + scale_color_continuous(low='red',high='blue')
