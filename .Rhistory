<<<<<<< HEAD
Sigma[2,1] <- rho * sigma_lon * sigma_lat
Sigma[2,2] <- sigma_lat^2
#Transition matrix for correlated movement
T<-array(dim=c(steps,2,2))
####Process Model
##Initial position##
xy[1,]<-mvrnorm(mu=c(0,0),Sigma=Sigma)
#First env
ocean[1]<-extract(habitat,SpatialPoints(data.frame(t(xy[1,]))))
#First behavioral state is a random draw from two probabilities
lambda<-c()
lambda[1]<-0.5
lambda[2]<-1-lambda[1]
state[1] <- sample(c(1,2),size=1,prob=lambda)
#First step is random walk
xy[2,]<-mvrnorm(mu=xy[1,],Sigma = Sigma)
#Draw random walk locations
for (x in 2:(steps-1)){
#Extract env
ocean[x]<-extract(habitat,SpatialPoints(data.frame(t(xy[x,]))))
#Behavior
phi[x,1] <- inv.logit(a1[state[x-1]]+beta[state[x-1]]*ocean[x])
phi[x,2] <- 1-inv.logit(a1[state[x-1]]+beta[state[x-1]]*ocean[x])
state[x] <- sample(c(1,2),size=1,prob=phi[x,])
#Movement correlation matrix
T[x,1,1] <- cos(theta[state[x]])
T[x,1,2] <- -sin(theta[state[x]])
T[x,2,1] <- sin(theta[state[x]])
T[x,2,2] <- cos(theta[state[x]])
# Add Correlated Displacement
d[x,]<-xy[x,] + gamma[state[x]] * T[x,,] %*% (xy[x,]  - xy[x-1,])
#next position
## Random walk
xy[x+1,]<-mvrnorm(n=1,mu=d[x,],Sigma=Sigma)
}
#Format to data frame
dxy<-data.frame(xy)
colnames(dxy)<-c("x","y")
dxy$Step<-1:nrow(dxy)
#Behavior
dxy$State<-as.factor(c(state,NA))
#Ocean
#grab last point
ocean[steps]<-extract(habitat,SpatialPoints(data.frame(t(xy[steps,]))))
dxy$ocean<-ocean
levels(dxy$State)<-c("Traveling","Feeding")
return(dxy)
}
dplot<-function(a1,beta){
x<-seq(0,0.4,0.01)
y<-inv.logit(a1[1]+beta[1]*x)
d11<-data.frame(x,y,State='Traveling',k='Traveling')
y<-1-inv.logit((a1[1])+beta[1]*x)
d12<-data.frame(x,y,State='Traveling',k='Feeding')
y<-inv.logit(a1[2]+beta[2]*x)
d21<-data.frame(x,y,State='Feeding',k='Traveling')
y<-1-inv.logit((a1[2])+beta[2]*x)
d22<-data.frame(x,y,State='Feeding',k='Feeding')
d<-rbind_all(list(d11,d12,d21,d22))
ggplot(d,aes(x=x,y=y,col=k)) + geom_line() + geom_point() + facet_wrap(~State) + labs(x="Ocean Depth (km)",y="Probability of State",col="Transition") + theme_bw()
}
#Transitions
a1=c(-2,-2)
#Effect of ocean depth
beta=c(10,10)
#Visualize
dplot(a1,beta)
m<-raster(mountains(7,1.2))
r<-(m-max(m[]))*-20/1000
ras2<-raster(xmn=-100,xmx=100,ymn=-100,ymx=100,resolution=0.5,crs=NA)
r2<-setExtent(r,ras2)
habitat<-resample(r2,ras2)
cr<-colorRampPalette(c("white","black"))
plot(habitat,main='Ocean Depth (km)',col=cr(10))
#Habitat dataframe for modeling
habitatdf<-as.data.frame(habitat,xy=TRUE)
dxy<-traj(gamma=gamma,theta=theta,a1=a1,habitat=habitat,beta=beta)
theta=c(0,pi)
bb<-bbox(cbind(dxy$x,dxy$y))
ggplot(dxy,aes(x=x,y=y)) + geom_raster(data=habitatdf,aes(x=x,y=y,fill=layer)) + geom_point(size=2,col='black') + geom_path(aes(col=State,group=1),size=1.5)  + theme_bw() + scale_fill_continuous("Ocean Depth",high='black',low='grey90') + coord_cartesian(xlim=bb[1,],ylim=bb[2,])
#Simulate Data
#Move persistance
gamma=c(0.9,0.1)
#Turning angle
theta=c(0,pi)
#Transitions
a1=c(-2,-2)
#Effect of ocean depth
beta=c(10,10)
#Visualize
dplot(a1,beta)
#Simulate environment
#Create environment
m<-raster(mountains(7,1.2))
r<-(m-max(m[]))*-20/1000
ras2<-raster(xmn=-100,xmx=100,ymn=-100,ymx=100,resolution=0.5,crs=NA)
r2<-setExtent(r,ras2)
habitat<-resample(r2,ras2)
cr<-colorRampPalette(c("white","black"))
plot(habitat,main='Ocean Depth (km)',col=cr(10))
#Habitat dataframe for modeling
habitatdf<-as.data.frame(habitat,xy=TRUE)
if(newModel){
dxy<-traj(gamma=gamma,theta=theta,a1=a1,habitat=habitat,beta=beta)
}
#habitat bbounding for visualization
bb<-bbox(cbind(dxy$x,dxy$y))
ggplot(dxy,aes(x=x,y=y)) + geom_raster(data=habitatdf,aes(x=x,y=y,fill=layer)) + geom_point(size=2,col='black') + geom_path(aes(col=State,group=1),size=1.5)  + theme_bw() + scale_fill_continuous("Ocean Depth",high='black',low='grey90') + coord_cartesian(xlim=bb[1,],ylim=bb[2,])
#Behavior plot
ggplot(dxy,aes(x=ocean,y=as.numeric(State)-1)) + geom_point() + stat_smooth(method="glm",method.args = list(family="binomial")) + scale_y_continuous(breaks=c(0,1),labels=c("Traveling","Feeding")) + ylab("Probability") + xlab("Ocean Depth")
mxy<-lapply(1:10,function(x) traj(gamma=gamma,theta=theta,a1=a1,habitat=habitat,beta=beta))
mxy<-melt(mxy,id.vars=c("x","y","Step","State","ocean"))
bb<-bbox(cbind(mxy$x,mxy$y))
ggplot(mxy,aes(x=x,y=y)) + theme_bw() + coord_cartesian(xlim=bb[1,],ylim=bb[2,]) +  geom_raster(data=habitatdf,aes(x=x,y=y,fill=layer)) + scale_fill_continuous("Ocean Depth",low='grey90',high='black')    + geom_path(aes(col=State,group=L1),size=1)
ggplot(mxy,aes(x=ocean,y=as.numeric(State)-1)) + geom_point() + stat_smooth(method="glm",method.args = list(family="binomial"),alpha=0.1) + scale_y_continuous(breaks=c(0,0.5,1),labels=c("Traveling","0.5","Feeding")) + ylab("Probability") + xlab("Ocean Depth") + theme_bw()
source('~/.active-rstudio-document', echo=TRUE)
head(behav_chains)
behav_chains<-rbind(behav[[1]],behav[[2]])
behav_chains
behav_chains<-melt(behav_chains)
colnames(behav_chains)<-c("Draw","par","value")
#As matrices
behav_chains
sv<-data.frame(str_match(behav_chains$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)]"))[,-1]
colnames(sv)<-c("Animal","parname","step")
behav_chains<-data.frame(behav_chains,sv)
head(behav_chains)
colnames(behav_chains)<-c("Draw","par","Probability","parname","step","Behavior")
behav_chains<-behav_chains[behav_chains$Behavior == 2,]
behav_chains$step<-as.numeric(as.character(behav_chains$step))
behav_chains<-behav_chains %>% arrange(step)
head(behav_chains)
colnames(behav_chains)<-c("Draw","par","Probability","parname","Animal","step","Behavior")
#We just need Feeding behavior
behav_chains<-behav_chains[behav_chains$Behavior == 2,]
#arrange by step
behav_chains$step<-as.numeric(as.character(behav_chains$step))
behav_chains<-behav_chains %>% arrange(step)
behav_chains$Behavior<-as.factor(behav_chains$Behavior)
levels(behav_chains$Behavior)<-c("Traveling","Feeding")
behav_chains %>% group_by(Animal,step) %>% summarize(phi=mean(Probability))
mean_phi<-behav_chains %>% group_by(Animal,step) %>% summarize(phi=mean(Probability))
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
})
mxy<-rbind_all(sxy)
sxy
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
return(x)
})
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
return(x)
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
return(x)
})
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
return(x)
})
sxy
mxy<-rbind_all(sxy)
mxy<-merge(mxy,mean_phi)
dim(mxy)
head(mxy)
ggplot(mxy)+geom_path(data=mxy, aes(x=x, y=y,col=Phi,aes(group=Animal)),size=2) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
ggplot(mxy)+geom_path(data=mxy, aes(x=x, y=y,col=phi,aes(group=Animal)),size=2) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
ggplot(mxy)+geom_path(aes(x=x, y=y,col=phi,aes(group=Animal)),size=2) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
ggplot(data=mxy)+geom_path(aes(x=x, y=y,col=phi,aes(group=Animal)),size=2) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
ggplot(data=mxy,aes(x=x, y=y,col=phi,group=Animal))+geom_path(,size=2) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
ggplot(data=mxy,aes(x=x, y=y,col=phi,group=Animal))+geom_path(size=2) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
ggplot(data=mxy,aes(x=x, y=y,col=phi,group=Animal))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
#needs to be same number of draws as spatial above
behav<-coda.samples(model=jags,n.iter=100,n.thin=1,variable.names=c("phi"))
#bind chains
behav_chains<-rbind(behav[[1]],behav[[2]])
behav_chains<-melt(behav_chains)
colnames(behav_chains)<-c("Draw","par","value")
#As matrices
sv<-data.frame(str_match(behav_chains$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)]"))[,-1]
colnames(sv)<-c("Animal","parname","step")
#format to combine
behav_chains<-data.frame(behav_chains,sv)
colnames(behav_chains)<-c("Draw","par","Probability","parname","Animal","step","Behavior")
#We just need Feeding behavior
behav_chains<-behav_chains[behav_chains$Behavior == 2,]
#arrange by step
behav_chains$step<-as.numeric(as.character(behav_chains$step))
behav_chains<-behav_chains %>% arrange(step)
#Label Behaviors
behav_chains$Behavior<-as.factor(behav_chains$Behavior)
levels(behav_chains$Behavior)<-c("Traveling","Feeding")
#average phi
mean_phi<-behav_chains %>% group_by(Animal,step) %>% summarize(phi=mean(Probability))
#merge with input
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
return(x)
})
mxy<-rbind_all(sxy)
mxy<-merge(mxy,mean_phi,by.x="Step",by.y="step")
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
head(mxy)
#needs to be same number of draws as spatial above
behav<-coda.samples(model=jags,n.iter=100,n.thin=1,variable.names=c("phi"))
#bind chains
behav_chains<-rbind(behav[[1]],behav[[2]])
behav_chains<-melt(behav_chains)
colnames(behav_chains)<-c("Draw","par","value")
#As matrices
sv<-data.frame(str_match(behav_chains$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)]"))[,-1]
colnames(sv)<-c("Animal","parname","step")
#format to combine
behav_chains<-data.frame(behav_chains,sv)
colnames(behav_chains)<-c("Draw","par","Probability","parname","Animal","Step","Behavior")
#We just need Feeding behavior
behav_chains<-behav_chains[behav_chains$Behavior == 2,]
#arrange by step
behav_chains$step<-as.numeric(as.character(behav_chains$step))
behav_chains<-behav_chains %>% arrange(step)
#Label Behaviors
behav_chains$Behavior<-as.factor(behav_chains$Behavior)
levels(behav_chains$Behavior)<-c("Traveling","Feeding")
#average phi
mean_phi<-behav_chains %>% group_by(Animal,step) %>% summarize(phi=mean(Probability))
#merge with input
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
return(x)
})
mxy<-rbind_all(sxy)
mxy<-merge(mxy,mean_phi,by=c("Step","Animal"))
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
#needs to be same number of draws as spatial above
behav<-coda.samples(model=jags,n.iter=100,n.thin=1,variable.names=c("phi"))
#bind chains
behav_chains<-rbind(behav[[1]],behav[[2]])
behav_chains<-melt(behav_chains)
colnames(behav_chains)<-c("Draw","par","value")
#As matrices
sv<-data.frame(str_match(behav_chains$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)]"))[,-1]
colnames(sv)<-c("Animal","parname","step")
#format to combine
behav_chains<-data.frame(behav_chains,sv)
colnames(behav_chains)<-c("Draw","par","Probability","parname","Animal","Step","Behavior")
#We just need Feeding behavior
behav_chains<-behav_chains[behav_chains$Behavior == 2,]
#arrange by step
behav_chains$Step<-as.numeric(as.character(behav_chains$Step))
behav_chains<-behav_chains %>% arrange(Step)
#Label Behaviors
behav_chains$Behavior<-as.factor(behav_chains$Behavior)
levels(behav_chains$Behavior)<-c("Traveling","Feeding")
#average phi
mean_phi<-behav_chains %>% group_by(Animal,Step) %>% summarize(phi=mean(Probability))
#merge with input
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$Step<-1:nrow(x)
return(x)
})
mxy<-rbind_all(sxy)
mxy<-merge(mxy,mean_phi,by=c("Step","Animal"))
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
head(mxy)
mxy<-rbind_all(sxy)
head(mxy)
mxy
mxy<-lapply(1:2,function(x) traj(gamma=gamma,theta=theta,a1=a1,habitat=habitat,beta=beta))
mxy<-melt(mxy,id.vars=c("x","y","Step","State","ocean"))
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$Step<-1:nrow(x)
return(x)
head(mxy)
source('~/.active-rstudio-document', echo=TRUE)
head(mxy)
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
ggplot(data=mxy,aes(x=as.numeric(step),y=Probability,col=ocean)) + geom_line(aes(group=1),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
ggplot(data=mxy,aes(x=as.numeric(Step),y=Probability,col=ocean)) + geom_line(aes(group=1),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
ggplot(data=mxy,aes(x=as.numeric(Step),y=phi,col=ocean)) + geom_line(aes(group=1),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding") + facet_wrap(~Animal)
ggplot(data=mxy,aes(x=as.numeric(Step),y=phi,col=ocean)) + geom_line(aes(group=1),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
ggplot(data=mxy,aes(x=as.numeric(Step),y=phi,col=ocean)) + geom_line(aes(group=Animal),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 10,fig.height = 5)
library(sp)
library(dismo)
library(raster)
library(reshape2)
library(ggplot2)
library(dplyr)
library(chron)
library(moveHMM)
library(move)
library(ggmap)
library(maps)
library(gridExtra)
library(stringr)
library(rjags)
d<-list.files("C:/Users/Ben/Dropbox/Whales/Data/",pattern="Argos.csv",full.names = T,recursive=T)
dat<-lapply(d,function(x){
a<-read.table(x,header=T,sep=",",row.names=NULL)
#column names were shifted
colnames(a)<-c(colnames(a)[-1],"x")
a$x<-NULL
return(a)
})
dat<-rbind_all(dat)
dat$TimeStamp<-as.POSIXct(dat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
head(dat)
dat$TimeStamp
dim(dat)
write.csv(dat,"InputData/Allyears.csv")
ddat<-dat %>% group_by(Animal,TimeStamp) %>% distinct() %>% arrange(Animal,TimeStamp)
dat$Animal<-dat$DeployID
ddat<-dat %>% group_by(Animal,TimeStamp) %>% distinct() %>% arrange(Animal,TimeStamp)
dim(ddat)
dat<-dat[!is.na(ddat$Latitude),]
dat<-dat[!ddat$Latitude < -90,]
write.csv(dat,"InputData/Allyears.csv")
dim(dat)
dat$Longitude
dat<-dat[!is.na(ddat$Longitude),]
dim(dat)
write.csv(dat,"InputData/Allyears.csv")
dat$Latitude
is.na(ddat$Latitude)
dat<-dat[!is.na(ddat$Latitude),]
dat<-dat[!is.na(ddat$Longitude),]
dat$Latitude
dim(dat)
dat<-dat[!is.na(ddat$Longitude),]
dim(dat)
dat<-dat[!is.na(ddat$Latitude),]
dim(dat)
d<-list.files("C:/Users/Ben/Dropbox/Whales/Data/",pattern="Argos.csv",full.names = T,recursive=T)
dat<-lapply(d,function(x){
a<-read.table(x,header=T,sep=",",row.names=NULL)
#column names were shifted
colnames(a)<-c(colnames(a)[-1],"x")
a$x<-NULL
return(a)
})
dat<-rbind_all(dat)
#Create move object
#Time stamp
dat$TimeStamp<-as.POSIXct(dat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#Animal stamp
dat$Animal<-dat$DeployID
ddat<-dat %>% group_by(Animal,TimeStamp) %>% distinct() %>% arrange(Animal,TimeStamp)
#remove empty and impossible geo location
ddat<-ddat[!is.na(ddat$Latitude),]
ddat<-ddat[!is.na(ddat$Longitude),]
ddat<-dat[!ddat$Latitude < -90,]
head(ddat)
ddat$Latitude
ddat$Latitude
is.na(ddat$Latitude()
is.na(ddat$Latitude)
sum(is.na(ddat$Latitude))
ddat<-ddat[!is.na(ddat$Latitude),]
sum(is.na(ddat$Latitude))
ddat<-ddat[!is.na(ddat$Longitude),]
sum(is.na(ddat$Longitude))
dim(ddat)
ddat$Latitude
write.csv(dat,"InputData/Allyears.csv")
write.csv(ddat,"InputData/Allyears.csv")
ddat$TimeStamp
range(ddat$TimeStamp)
ddat$TimeStamp
load("MultiSpecies.RData")
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior))
library(ggplot2)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior))
library(boot)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior))
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=inv.logit(value),fill=Behavior))
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior),alpha=0.1)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior),alpha=0.4)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior),alpha=0.7)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior),alpha=0.7) + theme_bw()
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=value,fill=Behavior),alpha=0.7) + theme_bw()
ggplot(data=pc[!pc$parameter %in% c("phi"),],aes(x=value)) + geom_histogram() + facet_wrap(~par,scales='free',ncol=4) + theme_bw() + geom_vline(data=tv,aes(xintercept=value),col='red',linetype='dashed') + ggtitle("Estimated parameters, true values in red")
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 10,fig.height = 5)
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-TRUE
mdat<-read.csv("InputData/FullData-550793189439001813.csv")
##need to look into making into a movebank object.
#Create a oceandepth in km
mdat$ocean<-mdat$ETOPO1.Elevation*-1 / 1000
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#give steps, this will need to be discretized.
#merge with input
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$Step<-1:nrow(x)
return(x)
})
mxy<-rbind_all(sxy)
#grab three individuals
mxy<-mxy[mxy$Animal %in% c('131133','131120','131118'),]
mxy$Animal<-as.numeric(as.factor(mxy$Animal))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=6,scale=2,maptype="satellite")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + labs(col="Whale")
dplot<-function(a1,beta,x){
y<-inv.logit(a1[1]+beta[1]*x)
d11<-data.frame(x,y,State="Traveling",Begin="Traveling")
y<-1-inv.logit(a1[1]+beta[1]*x)
d12<-data.frame(x,y,State="Feeding",Begin="Traveling")
y<-inv.logit(a1[2]+beta[2]*x)
d21<-data.frame(x,y,State="Traveling",Begin="Feeding")
y<-1-inv.logit(a1[2]+beta[2]*x)
d22<-data.frame(x,y,State="Feeding",Begin="Feeding")
d<-rbind_all(list(d11,d12,d21,d22))
}
#source model
source("Bayesian/MultiSpecies.R")
#print model
print.noquote(readLines("Bayesian/MultiSpecies.R"))
#prior shape
R <- diag(c(1,1))
#steps
steps<-as.numeric(table(mxy$Animal))
#make ocean a matrix
oc<-acast(mxy,Animal~Step,value.var="ocean")
#Individuals
ind=max(mxy$Animal)
#obs array
obs<-melt(mxy,measure.vars=c("x","y"))
obs<-acast(obs,Animal~Step~variable)
data=list(y=obs,steps=steps,R=R,ocean=oc,ind=ind)
#paramters to track
pt<-c("theta","gamma","alpha","beta","phi")
if(newModel){
system.time(jagM<-jags.parallel(model.file = "Bayesian/Multi_RW.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=1000,n.burnin=800,n.thin=1,DIC=FALSE))
}
library(rjags)
?jags.model
?coda.samples
system.time(
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2)
update(m,800)
out<-coda.samples(m,variable.names
=pt,n.iter=200)
)
system.time(
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2)
update(m,800)
?jags.model
?update
?jags.model
system.time(
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2,data=data)
update(m,800)
k<-function(){
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2,data=data)
update(m,800)
out<-coda.samples(m,variable.names=pt,n.iter=200)
}
k<-function(){
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2,data=data)
update(m,800)
out<-coda.samples(m,variable.names=pt,n.iter=200)
}
system.time(k())
load("MultiSpecies.RData")
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 10,fig.height = 5)
=======
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
head(mxy)
head(mxy)
interacton(mxy$Step,mxy$Track,mxy$Animal)
interaction(mxy$Step,mxy$Track,mxy$Animal)
mxy %>% group_by(Animal,Track,Step)
library(dplyr)
mxy %>% group_by(Animal,Track,Step)
mxy %>% group_by(Animal,Track,Step) %>% mutate(jStep2=1:n())
test<-mxy %>% group_by(Animal,Track,Step) %>% mutate(jStep2=1:n())
test$jStep
test$jStep2
test$jStep2==test$jStep2
identical(test$jStep2,test$jStep2)
lsos()
table(mdat$individual.local.identifier)
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 10,fig.height = 6)
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
library(survival)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-TRUE
load("SingleSpecies.RData")
predp<-pc %>% filter(par %in% c('lbeta_mu[1]','lalpha_mu[1]')) %>% group_by(par) %>% summarize(mean=mean(value),lower=quantile(value,0.05),upper=quantile(value,0.95)) %>% melt()
predp<-dcast(predp,...~par)
postplot<-list()
for(x in 1:nrow(predp)){
postplot[[x]]<-dplot(a1=predp[x,"lalpha_mu[1]"],beta=predp[x,"lbeta_mu[1]"],x=mxy$ocean)
}
names(postplot)<-predp$variable
postplot<-melt(postplot,id.vars=colnames(postplot[[1]]))
head(postplot)
head(dcast(postplot,...~L1,value.var="y"))
dcast(postplot,...~L1,value.var="y")
dsum<-dcast(postplot,...~L1,value.var="y")
dsum$mean
predp<-dcast(predp,...~par)
postplot<-list()
for(x in 1:nrow(predp)){
postplot[[x]]<-dplot(a1=predp[x,"lalpha_mu[1]"],beta=predp[x,"lbeta_mu[1]"],x=mxy$ocean)
predp<-pc %>% filter(par %in% c('lbeta_mu[1]','lalpha_mu[1]')) %>% group_by(par) %>% summarize(mean=mean(value),lower=quantile(value,0.05),upper=quantile(value,0.95)) %>% melt()
predp<-dcast(predp,...~par)
postplot<-list()
for(x in 1:nrow(predp)){
postplot[[x]]<-dplot(a1=predp[x,"lalpha_mu[1]"],beta=predp[x,"lbeta_mu[1]"],x=mxy$ocean)
}
names(postplot)<-predp$variable
postplot<-lapply(postplot,function(x){
x$ID<-1:nrow(x)
})
postplot<-melt(postplot,id.vars=colnames(postplot[[1]]))
head(postplot)
predp<-pc %>% filter(par %in% c('lbeta_mu[1]','lalpha_mu[1]')) %>% group_by(par) %>% summarize(mean=mean(value),lower=quantile(value,0.05),upper=quantile(value,0.95)) %>% melt()
predp<-dcast(predp,...~par)
postplot<-list()
for(x in 1:nrow(predp)){
postplot[[x]]<-dplot(a1=predp[x,"lalpha_mu[1]"],beta=predp[x,"lbeta_mu[1]"],x=mxy$ocean)
}
names(postplot)<-predp$variable
postplot<-lapply(postplot,function(x){
x$ID<-1:nrow(x)
return(x)
})
postplot<-melt(postplot,id.vars=colnames(postplot[[1]]))
postplot
head(postplot)
dsum<-dcast(postplot,ID~L1,value.var="y")
head(dsum)
dsum<-dcast(postplot,ID+x~L1,value.var="y")
head(dsum)
dsum<-dcast(postplot,ID+x+State+Begin~L1,value.var="y")
head(dsum)
ggplot(dsum[,]) + geom_ribbon(aes(x=x,y=mean,ymin=upper,ymax=lower,fill=State),alpha=0.5) + theme_bw() + labs(col="Transition",x="Ocean Depth (km)",y="Probability",fill="Transition") + facet_wrap(~Begin)
head(dsum)
#get the posterior estimates of the env function
predp<-pc %>% filter(par %in% c('lbeta_mu[1]','lalpha_mu[1]')) %>% group_by(par) %>% summarize(mean=mean(value),lower=quantile(value,0.05),upper=quantile(value,0.95)) %>% melt()
predp<-dcast(predp,...~par)
postplot<-list()
for(x in 1:nrow(predp)){
postplot[[x]]<-dplot(a1=predp[x,"lalpha_mu[1]"],beta=predp[x,"lbeta_mu[1]"],x=mxy$ocean)
}
names(postplot)<-predp$variable
postplot<-lapply(postplot,function(x){
x$ID<-1:nrow(x)
return(x)
})
postplot<-melt(postplot,id.vars=colnames(postplot[[1]]))
dsum<-dcast(postplot,ID+x+State+Begin~L1,value.var="y")
#mean env estimate
ggplot(dsum[,]) + geom_ribbon(aes(x=x,y=mean,ymin=upper,ymax=lower,fill=State),alpha=0.5) + theme_bw() + labs(col="Transition",x="Ocean Depth (km)",y="Probability",fill="Transition") + facet_wrap(~Begin)
table(dsum$State_
table(dsum$State)
table(dsum$Begin)
dplot(a1=predp[x,"lalpha_mu[1]"],beta=predp[x,"lbeta_mu[1]"],x=mxy$ocean)
ggplot(dsum[,]) + geom_ribbon(aes(x=x,y=mean,ymin=upper,ymax=lower,fill=State),alpha=0.5) + theme_bw() + labs(col="Transition",x="Ocean Depth (km)",y="Probability",fill="Transition") + facet_wrap(~Begin)
dsum
dsum$mean
is.na(dsum$mean)
head(dsum[is.na(dsum$mean),])
predp<-pc %>% filter(par %in% c('lbeta_mu[1]','lalpha_mu[1]')) %>% group_by(par) %>% summarize(mean=mean(value),lower=quantile(value,0.05),upper=quantile(value,0.95)) %>% melt()
get
predp
mdat$ETOPO1.Elevation
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(mxy)
SpatialPoints(cbind(mxy$x,mxy$y))
SpatialPoints(cbind(mxy$x,mxy$y),data=mxy$phi)
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy$phi)
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")]
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")])
raster(msp)
plot(raster(msp))
plot(rasterize(msp))
msp
plot(rasterize(msp,"phi"))
?rasterize
plot(rasterize(msp,field="phi"))
plot(rasterize(coordinates(msp),field="phi"))
plot(rasterize(coordinates(msp),field=msp$phi))
plot(rasterize(coordinates(msp),field=mxy$phi))
mxy$phi
coordinates(msp)
rasterize(coordinates(msp),field="phi")
r<-raster(bbox(msp))
rasterize(x=msp,field="phi")
rasterize(x=msp,y=r,field="phi")
r<-raster(bbox(msp),res=100)
res(r)<-100
rasterize(x=msp,y=r,field="phi")
m<-rasterize(x=msp,y=r,field="phi")
plot(m)
m<-rasterize(x=msp,y=r,field=mxy$phi)
plot(m)
m
r<-raster(msp)
res(r)<-100
m<-rasterize(x=msp,y=r,field=mxy$phi)
plto(m)
m
plot(m)
m
mxy$phi
m<-rasterize(x=msp,y=r,field=mxy$phi)
m
r<-raster(msp)
res(r)<-1000
m<-rasterize(x=msp,y=r,field=mxy$phi)
plot(m)
mxp
msp
r<-raster(msp)
res(r)<-10000
m<-rasterize(x=msp,y=r,field=mxy$phi)
plot(m)
r
msp
CRS(msp)
projection(msp)
?projection
?CRS
)
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],CRS("+proj=longlat +datum=WGS84"))
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp)
r
plot(r)
res(r)<-1000
m<-rasterize(x=msp,y=r,field=mxy$phi)
plot(m)
m
m<-rasterize(x=msp,y=r,field="phi")
plot(m)
m
msp
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp)
r
r<-raster(msp)
r
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
msp
?rasterize
r<-raster(msp)
plot(r)
r
r[]<-1
plot()
plot(r)
m<-rasterize(x=msp,y=r,field="phi")
plot(m)
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp)
m<-rasterize(x=msp,y=r,field="phi")
plot(m)
r
mxy$NOAA.Climate.Indexes.Global.Tropics.SST.Anomaly
is.na(mxy$NOAA.Climate.Indexes.Global.Tropics.SST.Anomaly)
sum(is.na(mxy$NOAA.Climate.Indexes.Global.Tropics.SST.Anomaly))
sum(is.na(mdat$NOAA.Climate.Indexes.Global.Tropics.SST.Anomaly))
mdat$OSU.Ocean.NPP.0.083deg.8d.NPP
head(m)
feedmap<-melt(m)
feedmap<-as.data.frame(m)
head(feedmap)
feedmap<-data.frame(m)
feedmap <- rasterToPoints(m)
feedmap <- data.frame(rasterToPoints(m))
head(feedmap)
geom_raster(aes(fill=MAP)) theme_bw() +
theme_minimal()
ggplot(data=feedmap, aes(y=x, x=y)) +geom_raster(aes(fill=layer)) + theme_minimal()
ggplot(data=feedmap, aes(x=x, y=y)) +geom_raster(aes(fill=layer)) + theme_minimal()
world()
maps()
map()
m <- get_map(location=pp,source="osm",zoom=8,scale=2,maptype="satellite")
?get_map
m <- get_map(location=pp,source="osm",zoom=8,scale=2)
m <- get_map(location=pp,source="osm")
m
ggmap(m) + geom_raster(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()
?get_map
m <- get_map(location=bbox(feedmap),source="osm")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + labs(col="Whale")
bbox(feedmap)
m <- get_map(location=bbox(m),source="osm")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + labs(col="Whale")
bbox(m)
m
m<-rasterize(x=msp,y=r,field="phi")
temp <- get_map(location=bbox(m),source="osm")
temp <- get_map(location=bbox(m),source="osm",zoom=3)
world()
m
bbox(m)
temp <- get_map(location=bbox(m),source="google",zoom=3)
ggmap(temp)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + labs(col="Whale")
ggmap(temp)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + labs(col="Whale")+ geom_raster(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()
ggmap(temp)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + labs(col="Whale")+ geom_fill(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()
ggmap(temp)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + labs(col="Whale")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()
ggmap(temp) labs(col="Whale")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) +
ggmap(temp) + labs(col="Whale")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) +
ggmap(temp) + labs(col="Whale")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) +
ggmap(temp) + labs(col="Whale")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5)
temp <- get_map(location=bbox(m),source="google",zoom=3,maptype="satellite")
ggmap(temp) + labs(col=)+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5)
ggmap(temp) + labs(col=)+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5)
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5)
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
r
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp)
res(r)<-1000
m<-rasterize(x=msp,y=r,field="phi")
#plotting
feedmap <- data.frame(rasterToPoints(m))
temp <- get_map(location=bbox(m),source="google",zoom=3,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
r
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp)
r
res(r)<-1
m<-rasterize(x=msp,y=r,field="phi")
#plotting
feedmap <- data.frame(rasterToPoints(m))
temp <- get_map(location=bbox(m),source="google",zoom=3,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
## Credit: Taken from:  http://stackoverflow.com/questions/1358003/tricks-to-manage-the-available-memory-in-an-r-session
# improved list of objects
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(print(object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
plot(mp)
plot(m)
a<-drawExtent()
a<-drawExtent()
a
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp,extent(xmin=-72,xmax=-52,ymin=-65,ymax=-57))
res(r)<-0.5
m<-rasterize(x=msp,y=r,field="phi")
#plotting
feedmap <- data.frame(rasterToPoints(m))
temp <- get_map(location=bbox(m),source="google",zoom=3,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
plot(r)
r
r<-raster(msp,rxt=extent(xmin=-72,xmax=-52,ymin=-65,ymax=-57))
r<-raster(msp,ext=extent(xmin=-72,xmax=-52,ymin=-65,ymax=-57))
extent(xmin=-72,xmax=-52,ymin=-65,ymax=-57)
?ext
?Raster
r<-raster(msp,ext=c(xmin=-72,xmax=-52,ymin=-65,ymax=-57))
?extent
r<-raster(msp,ext=c(72,-52,-65,-57))
res(r)<-0.5
r<-raster(msp,extent=c(72,-52,-65,-57))
r<-raster(msp,extent(c(72,-52,-65,-57)))
?raster
r<-raster(msp,ext=extent(c(72,-52,-65,-57)))
r<-raster(msp,ext=extent(c(-72,-52,-65,-57)))
res(r)<-0.5
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp,ext=extent(c(-72,-52,-65,-57)))
res(r)<-0.5
m<-rasterize(x=msp,y=r,field="phi")
#plotting
feedmap <- data.frame(rasterToPoints(m))
temp <- get_map(location=bbox(m),source="google",zoom=3,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
r
m
bbox(m)
temp <- get_map(location=bbox(m),source="google",zoom=3,maptype="satellite")
temp <- get_map(location=bbox(m),source="google",zoom=7,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
temp <- get_map(location=bbox(m),source="google",zoom=5,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp,ext=extent(c(-70,-54,-64.5,-59)))
res(r)<-0.5
m<-rasterize(x=msp,y=r,field="phi")
#plotting
feedmap <- data.frame(rasterToPoints(m))
temp <- get_map(location=bbox(m),source="google",zoom=5,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp,ext=extent(c(-70,-54,-64.5,-59)))
res(r)<-0.5
m<-rasterize(x=msp,y=r,field="phi")
#plotting
feedmap <- data.frame(rasterToPoints(m))
temp <- get_map(location=bbox(m),source="google",zoom=6,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp,ext=extent(c(-70,-54,-66,-58)))
res(r)<-0.5
m<-rasterize(x=msp,y=r,field="phi")
#plotting
feedmap <- data.frame(rasterToPoints(m))
temp <- get_map(location=bbox(m),source="google",zoom=6,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
msp<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy[,c("x","y","Animal","phi","timestamp")],proj=CRS("+proj=longlat +datum=WGS84"))
r<-raster(msp,ext=extent(c(-70,-55,-66,-58)))
res(r)<-0.5
m<-rasterize(x=msp,y=r,field="phi")
#plotting
feedmap <- data.frame(rasterToPoints(m))
temp <- get_map(location=bbox(m),source="google",zoom=5,maptype="satellite")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal()+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer)) + theme_minimal() + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
ggmap(temp) + labs(fill="Probabilty of Feeding")+ geom_tile(data=feedmap,aes(x=x, y=y,fill=layer),alpha=0.7) + theme_minimal() + scale_color_discrete(guide="none") + scale_fill_continuous(low="blue",high="red")
source('~/.active-rstudio-document', echo=TRUE)
print.noquote(readLines("Bayesian/MultiSpecies.R"))
readLines("Bayesian/MultiSpecies.R")
print.noquote(readLines("Bayesian/MultiSpecies.R"))
cat(readLines("Bayesian/MultiSpecies.R"))
library(pandoc)
library(pander)
install.packages("pander")
library(pander)
?pandoc.table.return()
print.noquote(a<-readLines("Bayesian/MultiSpecies.R"))
pandoc.table(a)
a
pandoc.strong(a)
pandoc.table(a)
print.noquote(a<-scan("Bayesian/MultiSpecies.R"))
pandoc.table(cat(a))
print.noquote(readLines("Bayesian/MultiSpecies.R"))
print.noquote(readLines("Bayesian/MultiSpecies.jags"))
source("Bayesian/MultiSpecies.R")
print.noquote(readLines("Bayesian/MultiSpecies.R"))
print.noquote(readLines("Bayesian/Multi_RW.jags"))
print.noquote(readLines("Bayesian/MultiSpecies.R"))
setwd("~/Whales")
print.noquote(readLines("Bayesian/MultiSpecies.R"))
read.table(""Bayesian/MultiSpecies.R"")
read.table("Bayesian/MultiSpecies.R")
print.noquote(readLines("Bayesian/MultiSpecies.R"))
print("<div style="line-height: 2em;">")
48+62
48+24
2>=2
load("SingleSpecies.RData")
head(mday)
head(mdat)
table(mdat$individual.local.identifier)
spp[2]
sxy<-split(mxy,list(mxy$Animal,mxy$Track),drop=T)
dstat<-melt(move::distanceSummary(moved))
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5)
>>>>>>> 9a3c5207ff394d8c65d3d63332f704bf48a6435d
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
<<<<<<< HEAD
=======
library(survival)
>>>>>>> 9a3c5207ff394d8c65d3d63332f704bf48a6435d
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-TRUE
<<<<<<< HEAD
=======
dstat<-melt(move::distanceSummary(moved))
dstat
unique(dstat$variable)
dstat<-dstat[dstat$variable %in% c("TravDist","FarthDist"),]
?distanceSummary
ggplot(dstat,aes(value/1000)) + geom_histogram() + facet_wrap(~variable,scales="free")
levels(dstat$variable)
dstat<-dstat[dstat$variable %in% c("TravDist","AverDist","FarthDist"),]
dstat<-melt(move::distanceSummary(moved))
dstat<-dstat[dstat$variable %in% c("TravDist","AverDist","FarthDist"),]
levels(dstat$variable)
dstat<-droplevels(dstat[dstat$variable %in% c("TravDist","AverDist","FarthDist"),]_
dstat<-droplevels(dstat[dstat$variable %in% c("TravDist","AverDist","FarthDist"),])
levels(dstat$variable)
levels(dstat$variable)<-c("Total Distance (km)","Average Distance Between Points","Farthest Distance Between Points")
ggplot(dstat,aes(value/1000)) + geom_histogram() + facet_wrap(~variable,scales="free")
tstat<-move::timeSummary(moved)
tstat<-melt(tstat,measure.vars=colnames(tstat[[1]]))
tstat
levels(tstat$variable)
?timeSummary
tstat<-droplevels(tstat[tstat$variable %in% c("Duration","AverDur")])
tstat<-droplevels(tstat[tstat$variable %in% c("Duration","AverDur"),])
levels(tstat)<-c("Total Time (Hours)","Average Time Between Points (Hours)")
ggplot(tstat,aes(value)) + geom_histogram() + facet_wrap(~variable,scales="free")
levels(tstat)<-c("Total Time (Hours)","Average Time Between Points (Hours)")
ggplot(tstat,aes(value)) + geom_histogram() + facet_wrap(~variable,scales="free")
levels(tstat$variable)<-c("Total Time (Hours)","Average Time Between Points (Hours)")
ggplot(tstat,aes(value)) + geom_histogram() + facet_wrap(~variable,scales="free")
vstat<-move::speedSummary(moved)
vstat<-melt(vstat,measure.vars=colnames(vstat[[1]]))
vstat
vstat$variable
levels(vstat$variable)
?speedSummary
levels(vstat$variable)<-C("Average Speed (m/s)","Variance in Speed (m/s)","Max Speed (m/s)")
levels(vstat$variable)<-c("Average Speed (m/s)","Variance in Speed (m/s)","Max Speed (m/s)")
ggplot(vstat,aes(value)) + geom_histogram() + facet_wrap(~variable,scales="free")
astat<-move::angleSummary(moved)
astat<-melt(astat,measure.vars=colnames(astat[[1]]))
astat
astat$variable
astat[astat$variable %in% "AverAzimuth",]
astat<-astat[astat$variable %in% "AverAzimuth",]
?angleSummary
astat<-move::angleSummary(moved)
astat<-melt(astat,measure.vars=colnames(astat[[1]]))
astat<-astat[astat$variable %in% "AverAzimuth",]
levels(astat$variable)<-"Turning Angle (degrees)"
ggplot(astat,aes(value)) + geom_histogram() + facet_wrap(~variable,scales="free")
astat<-move::angleSummary(moved)
astat<-melt(astat,measure.vars=colnames(astat[[1]]))
astat<-astat[astat$variable %in% "AverAzimuth",]
levels(astat$variable)
astat<-droplevels(astat[astat$variable %in% "AverAzimuth",])
levels(astat$variable)<-"Turning Angle (degrees)"
ggplot(astat,aes(value)) + geom_histogram() + facet_wrap(~variable,scales="free")
>>>>>>> 9a3c5207ff394d8c65d3d63332f704bf48a6435d
