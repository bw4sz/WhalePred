levels(behav_chains$Behavior)<-c("Traveling","Feeding")
#average phi
mean_phi<-behav_chains %>% group_by(Animal,step) %>% summarize(phi=mean(Probability))
#merge with input
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
return(x)
})
mxy<-rbind_all(sxy)
mxy<-merge(mxy,mean_phi,by.x="Step",by.y="step")
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
head(mxy)
#needs to be same number of draws as spatial above
behav<-coda.samples(model=jags,n.iter=100,n.thin=1,variable.names=c("phi"))
#bind chains
behav_chains<-rbind(behav[[1]],behav[[2]])
behav_chains<-melt(behav_chains)
colnames(behav_chains)<-c("Draw","par","value")
#As matrices
sv<-data.frame(str_match(behav_chains$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)]"))[,-1]
colnames(sv)<-c("Animal","parname","step")
#format to combine
behav_chains<-data.frame(behav_chains,sv)
colnames(behav_chains)<-c("Draw","par","Probability","parname","Animal","Step","Behavior")
#We just need Feeding behavior
behav_chains<-behav_chains[behav_chains$Behavior == 2,]
#arrange by step
behav_chains$step<-as.numeric(as.character(behav_chains$step))
behav_chains<-behav_chains %>% arrange(step)
#Label Behaviors
behav_chains$Behavior<-as.factor(behav_chains$Behavior)
levels(behav_chains$Behavior)<-c("Traveling","Feeding")
#average phi
mean_phi<-behav_chains %>% group_by(Animal,step) %>% summarize(phi=mean(Probability))
#merge with input
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$step<-1:nrow(x)
return(x)
})
mxy<-rbind_all(sxy)
mxy<-merge(mxy,mean_phi,by=c("Step","Animal"))
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
#needs to be same number of draws as spatial above
behav<-coda.samples(model=jags,n.iter=100,n.thin=1,variable.names=c("phi"))
#bind chains
behav_chains<-rbind(behav[[1]],behav[[2]])
behav_chains<-melt(behav_chains)
colnames(behav_chains)<-c("Draw","par","value")
#As matrices
sv<-data.frame(str_match(behav_chains$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)]"))[,-1]
colnames(sv)<-c("Animal","parname","step")
#format to combine
behav_chains<-data.frame(behav_chains,sv)
colnames(behav_chains)<-c("Draw","par","Probability","parname","Animal","Step","Behavior")
#We just need Feeding behavior
behav_chains<-behav_chains[behav_chains$Behavior == 2,]
#arrange by step
behav_chains$Step<-as.numeric(as.character(behav_chains$Step))
behav_chains<-behav_chains %>% arrange(Step)
#Label Behaviors
behav_chains$Behavior<-as.factor(behav_chains$Behavior)
levels(behav_chains$Behavior)<-c("Traveling","Feeding")
#average phi
mean_phi<-behav_chains %>% group_by(Animal,Step) %>% summarize(phi=mean(Probability))
#merge with input
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$Step<-1:nrow(x)
return(x)
})
mxy<-rbind_all(sxy)
mxy<-merge(mxy,mean_phi,by=c("Step","Animal"))
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
head(mxy)
mxy<-rbind_all(sxy)
head(mxy)
mxy
mxy<-lapply(1:2,function(x) traj(gamma=gamma,theta=theta,a1=a1,habitat=habitat,beta=beta))
mxy<-melt(mxy,id.vars=c("x","y","Step","State","ocean"))
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$Step<-1:nrow(x)
return(x)
head(mxy)
source('~/.active-rstudio-document', echo=TRUE)
head(mxy)
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2,aes(group=Animal)) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding")
ggplot(data=mxy,aes(x=as.numeric(step),y=Probability,col=ocean)) + geom_line(aes(group=1),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
ggplot(data=mxy,aes(x=as.numeric(Step),y=Probability,col=ocean)) + geom_line(aes(group=1),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
ggplot(data=mxy,aes(x=as.numeric(Step),y=phi,col=ocean)) + geom_line(aes(group=1),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
ggplot(data=mxy,aes(x=x, y=y,col=phi))+geom_path(size=2) + scale_color_continuous(low='blue',high='red') + labs(col="Probability of Feeding") + facet_wrap(~Animal)
ggplot(data=mxy,aes(x=as.numeric(Step),y=phi,col=ocean)) + geom_line(aes(group=1),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
ggplot(data=mxy,aes(x=as.numeric(Step),y=phi,col=ocean)) + geom_line(aes(group=Animal),size=2.5) + labs("Probability of Feeding") + theme_bw() + scale_color_continuous(low='light blue',high='black') + labs(x="Time Step",y="Liklihood of Feeding")
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 10,fig.height = 5)
library(sp)
library(dismo)
library(raster)
library(reshape2)
library(ggplot2)
library(dplyr)
library(chron)
library(moveHMM)
library(move)
library(ggmap)
library(maps)
library(gridExtra)
library(stringr)
library(rjags)
d<-list.files("C:/Users/Ben/Dropbox/Whales/Data/",pattern="Argos.csv",full.names = T,recursive=T)
dat<-lapply(d,function(x){
a<-read.table(x,header=T,sep=",",row.names=NULL)
#column names were shifted
colnames(a)<-c(colnames(a)[-1],"x")
a$x<-NULL
return(a)
})
dat<-rbind_all(dat)
dat$TimeStamp<-as.POSIXct(dat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
head(dat)
dat$TimeStamp
dim(dat)
write.csv(dat,"InputData/Allyears.csv")
ddat<-dat %>% group_by(Animal,TimeStamp) %>% distinct() %>% arrange(Animal,TimeStamp)
dat$Animal<-dat$DeployID
ddat<-dat %>% group_by(Animal,TimeStamp) %>% distinct() %>% arrange(Animal,TimeStamp)
dim(ddat)
dat<-dat[!is.na(ddat$Latitude),]
dat<-dat[!ddat$Latitude < -90,]
write.csv(dat,"InputData/Allyears.csv")
dim(dat)
dat$Longitude
dat<-dat[!is.na(ddat$Longitude),]
dim(dat)
write.csv(dat,"InputData/Allyears.csv")
dat$Latitude
is.na(ddat$Latitude)
dat<-dat[!is.na(ddat$Latitude),]
dat<-dat[!is.na(ddat$Longitude),]
dat$Latitude
dim(dat)
dat<-dat[!is.na(ddat$Longitude),]
dim(dat)
dat<-dat[!is.na(ddat$Latitude),]
dim(dat)
d<-list.files("C:/Users/Ben/Dropbox/Whales/Data/",pattern="Argos.csv",full.names = T,recursive=T)
dat<-lapply(d,function(x){
a<-read.table(x,header=T,sep=",",row.names=NULL)
#column names were shifted
colnames(a)<-c(colnames(a)[-1],"x")
a$x<-NULL
return(a)
})
dat<-rbind_all(dat)
#Create move object
#Time stamp
dat$TimeStamp<-as.POSIXct(dat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#Animal stamp
dat$Animal<-dat$DeployID
ddat<-dat %>% group_by(Animal,TimeStamp) %>% distinct() %>% arrange(Animal,TimeStamp)
#remove empty and impossible geo location
ddat<-ddat[!is.na(ddat$Latitude),]
ddat<-ddat[!is.na(ddat$Longitude),]
ddat<-dat[!ddat$Latitude < -90,]
head(ddat)
ddat$Latitude
ddat$Latitude
is.na(ddat$Latitude()
is.na(ddat$Latitude)
sum(is.na(ddat$Latitude))
ddat<-ddat[!is.na(ddat$Latitude),]
sum(is.na(ddat$Latitude))
ddat<-ddat[!is.na(ddat$Longitude),]
sum(is.na(ddat$Longitude))
dim(ddat)
ddat$Latitude
write.csv(dat,"InputData/Allyears.csv")
write.csv(ddat,"InputData/Allyears.csv")
ddat$TimeStamp
range(ddat$TimeStamp)
ddat$TimeStamp
load("MultiSpecies.RData")
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior))
library(ggplot2)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior))
library(boot)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior))
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=inv.logit(value),fill=Behavior))
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior),alpha=0.1)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior),alpha=0.4)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior),alpha=0.7)
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=logit(value),fill=Behavior),alpha=0.7) + theme_bw()
ggplot(pc[pc$parameter %in% "phi",]) + geom_histogram(aes(x=value,fill=Behavior),alpha=0.7) + theme_bw()
ggplot(data=pc[!pc$parameter %in% c("phi"),],aes(x=value)) + geom_histogram() + facet_wrap(~par,scales='free',ncol=4) + theme_bw() + geom_vline(data=tv,aes(xintercept=value),col='red',linetype='dashed') + ggtitle("Estimated parameters, true values in red")
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 10,fig.height = 5)
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-TRUE
mdat<-read.csv("InputData/FullData-550793189439001813.csv")
##need to look into making into a movebank object.
#Create a oceandepth in km
mdat$ocean<-mdat$ETOPO1.Elevation*-1 / 1000
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#give steps, this will need to be discretized.
#merge with input
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x){
x$Step<-1:nrow(x)
return(x)
})
mxy<-rbind_all(sxy)
#grab three individuals
mxy<-mxy[mxy$Animal %in% c('131133','131120','131118'),]
mxy$Animal<-as.numeric(as.factor(mxy$Animal))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=6,scale=2,maptype="satellite")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + labs(col="Whale")
dplot<-function(a1,beta,x){
y<-inv.logit(a1[1]+beta[1]*x)
d11<-data.frame(x,y,State="Traveling",Begin="Traveling")
y<-1-inv.logit(a1[1]+beta[1]*x)
d12<-data.frame(x,y,State="Feeding",Begin="Traveling")
y<-inv.logit(a1[2]+beta[2]*x)
d21<-data.frame(x,y,State="Traveling",Begin="Feeding")
y<-1-inv.logit(a1[2]+beta[2]*x)
d22<-data.frame(x,y,State="Feeding",Begin="Feeding")
d<-rbind_all(list(d11,d12,d21,d22))
}
#source model
source("Bayesian/MultiSpecies.R")
#print model
print.noquote(readLines("Bayesian/MultiSpecies.R"))
#prior shape
R <- diag(c(1,1))
#steps
steps<-as.numeric(table(mxy$Animal))
#make ocean a matrix
oc<-acast(mxy,Animal~Step,value.var="ocean")
#Individuals
ind=max(mxy$Animal)
#obs array
obs<-melt(mxy,measure.vars=c("x","y"))
obs<-acast(obs,Animal~Step~variable)
data=list(y=obs,steps=steps,R=R,ocean=oc,ind=ind)
#paramters to track
pt<-c("theta","gamma","alpha","beta","phi")
if(newModel){
system.time(jagM<-jags.parallel(model.file = "Bayesian/Multi_RW.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=1000,n.burnin=800,n.thin=1,DIC=FALSE))
}
library(rjags)
?jags.model
?coda.samples
system.time(
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2)
update(m,800)
out<-coda.samples(m,variable.names
=pt,n.iter=200)
)
system.time(
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2)
update(m,800)
?jags.model
?update
?jags.model
system.time(
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2,data=data)
update(m,800)
k<-function(){
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2,data=data)
update(m,800)
out<-coda.samples(m,variable.names=pt,n.iter=200)
}
k<-function(){
m<-jags.model(file = "Bayesian/Multi_RW.jags",n.chains=2,data=data)
update(m,800)
out<-coda.samples(m,variable.names=pt,n.iter=200)
}
system.time(k())
load("MultiSpecies.RData")
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 10,fig.height = 5)
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-TRUE
2330.062/60
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5)
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
library(survival)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-TRUE
?get_map
source('~/.active-rstudio-document', echo=TRUE)
x<-pc %>% filter(parameter=="state") %>% filter(Animal==1,Draw==1,Chain==1)
x<-pc %>% filter(parameter=="state") %>% filter(Animal==1,Draw==1,chain==1)
state_change<-rle(as.numeric(x$value))
runl<-data.frame(Animal=unique(x$Animal),runs=state_change$lengths,Behavior=state_change$values)
runl$Behavior<-as.factor(runl$Behavior)
levels(runl$Behavior)<-c("Traveling","Feeding")
x[cumsum(runl$runs)+1,"Bout"]<-seq(1,nrow(runl),1)
x$Bout<-repeat.before(x$Bout)
#Fill missing NA values
repeat.before = function(x) {   # repeats the last non NA value. Keeps leading NA
ind = which(!is.na(x))      # get positions of nonmissing values
if(is.na(x[1]))             # if it begins with a missing, add the
ind = c(1,ind)        # first position to the indices
rep(x[ind], times = diff(   # repeat the values at these indices
c(ind, length(x) + 1) )) # diffing the indices + length yields how often
}
x$Bout<-repeat.before(x$Bout)
head(x)
cumsum(runl$runs)
cumsum(runl$runs)
c(1,cumsum(runl$runs))
?move
save.image("SingleSpecies.RData")
source('~/.active-rstudio-document', echo=TRUE)
x<-pc %>% filter(parameter=="state",chain==1,Draw==1,Animal)
x<-pc %>% filter(parameter=="state",chain==1,Draw==1,Animal==1)
head(x)
state_change<-rle(as.numeric(x$value))
runl<-data.frame(Animal=unique(x$Animal),runs=state_change$lengths,Behavior=state_change$values)
runl$Behavior<-as.factor(runl$Behavior)
levels(runl$Behavior)<-c("Traveling","Feeding")
x[c(1,cumsum(runl$runs)),"Bout"]<-seq(1,nrow(runl),1)
head(x)
state_change<-rle(as.numeric(x$value))
runl<-data.frame(Animal=unique(x$Animal),runs=state_change$lengths,Behavior=state_change$values)
runl$Behavior<-as.factor(runl$Behavior)
levels(runl$Behavior)<-c("Traveling","Feeding")
x[c(1,cumsum(runl$runs)),"Bout"]
x[c(1,cumsum(runl$runs)),"Bout"]<-seq(0,nrow(runl),1)+1
x
x$Bout<-repeat.before(x$Bout)
#Fill missing NA values
repeat.before = function(x) {   # repeats the last non NA value. Keeps leading NA
ind = which(!is.na(x))      # get positions of nonmissing values
if(is.na(x[1]))             # if it begins with a missing, add the
ind = c(1,ind)        # first position to the indices
rep(x[ind], times = diff(   # repeat the values at these indices
c(ind, length(x) + 1) )) # diffing the indices + length yields how often
}
x$Bout<-repeat.before(x$Bout)
x
x[c(1,cumsum(runl$runs)+1),"Bout"]<-seq(0,nrow(runl),1)+1
x$Bout<-repeat.before(x$Bout)
x
cumsum(runl$runs)+1
state_change<-rle(as.numeric(x$value))
runl<-data.frame(Animal=unique(x$Animal),runs=state_change$lengths,Behavior=state_change$values)
runl$Behavior<-as.factor(runl$Behavior)
levels(runl$Behavior)<-c("Traveling","Feeding")
x
x$Bout<-NULL
x[c(1,cumsum(runl$runs)+1),"Bout"]<-seq(0,nrow(runl),1)+1
x
x$Bout<-repeat.before(x$Bout)
x
runs
tf<-coxph(Surv(time=feedr$hours,event=feedr$status)~feedr$Animal)
feedr<-runs[runs$Behavior %in% "Feeding",]
feedr$status<-1
tf<-coxph(Surv(time=feedr$hours,event=feedr$status)~feedr$Animal)
feedr$Animal
source('~/.active-rstudio-document', echo=TRUE)
feedr
?Surv
feedr %>% filter(Draw==1,chain==1,Animal==1)
runs %>% filter(Draw==1,chain==1,Animal==1)
runs %>% filter(Draw==1,chain==1,Animal==1) %>% as.data.frame()
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.)) %>% filter(Behavior=="Feeding")
endtrack<-function(x){
if(x[nrow(x),"Behavior"]=="Traveling"){
x[nrow(x),"Status"]<-0
}
}
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.)) %>% filter(Behavior=="Feeding")
endtrack<-function(x){
if(x[nrow(x),"Behavior"]=="Traveling"){
x[nrow(x),"Status"]<-0
}
}
return(x)
#if track ends, status is 0 not 1
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.)) %>% filter(Behavior=="Feeding")
endtrack<-function(x){
if(x[nrow(x),"Behavior"]=="Traveling"){
x[nrow(x),"Status"]<-0
}
return(x)
}
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.)) %>% filter(Behavior=="Feeding")
feedr
feedr<-runs %>% mutate(Status=1) %>% group_by(Draw,chain,Animal) %>% do(endtrack(.)) %>% filter(Behavior=="Feeding")
feedr
as.data.frame(feedr)
feedr$Status
table(feedr$Status)
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.))
feedr$status<-1
endtrack<-function(x){
if(x[nrow(x),"Behavior"]=="Traveling"){
x[nrow(x),"Status"]<-0
}
return(x)
}
#if track ends, status is 0 not 1
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.))
feedr
runs$status<-1
runs
runs$status<-runs$Behavior=="Feeding"
runs$status<-runs$Behavior=="Traveling"
tf<-coxph(Surv(time=runs$hours,event=runs$status,type="right")~runs$Animal)
summary(tf)
plot(survfit(tf),ylab="Proportion still feeding",xlab="Duration (hours)")
tf<-coxph(Surv(time=runs$hours,event=runs$status)~runs$Animal)
summary(tf)
plot(survfit(tf),ylab="Proportion still feeding",xlab="Duration (hours)")
head(runs)
?Surv
runs$status<-1
endtrack<-function(x){
return(x)
x[nrow(x),"Status"]<-0
}
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.))
feedr
feedr$status
table(feedr$status)
x
runs %>% filter(Draw==1,chain==1,Animal==1)
x<-runs %>% filter(Draw==1,chain==1,Animal==1)
nrow(x)
x[nrow(x),]
x[nrow(x),"Status"]<-0
x
as.data.frame(x)
runs$status<-1
endtrack<-function(x){
x[nrow(x),"Status"]<-0
return(x)
}
#if track ends, status is 0 not 1
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.))
runs$status<-1
endtrack<-function(x){
x[nrow(x),"status"]<-0
}
return(x)
runs$status<-1
endtrack<-function(x){
x[nrow(x),"status"]<-0
return(x)
}
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.))
feedr
table(feedr$status)
tf<-coxph(Surv(time=runs$hours,event=runs$status,type="mstate")~runs$Animal)
tf<-coxph(Surv(time=runs$hours,event=runs$status,type="right")~runs$Animal)
tf
tf<-coxph(Surv(time=runs$hours,event=runs$status,type="right")~runs$Animal+runs$Behavior)
tf
summary(tf)
plot(survfit(tf),ylab="Proportion still feeding",xlab="Duration (hours)")
feedr<-runs %>% group_by(Draw,chain,Animal) %>% do(endtrack(.)) %>% filter(Behavior=="Feeding")
feedr
tf<-coxph(Surv(time=feedr$hours,event=feedr$status,type="right")~feedr$Animal)
summary(tf)
plot(survfit(tf),ylab="Proportion still feeding",xlab="Duration (hours)")
